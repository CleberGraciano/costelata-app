name: Deploy para VPS

on:
  push:
    branches:
    - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout código
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Sincronizar código para VPS
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_KEY }}
        script: |
          set -e
          # Cria pastas se não existirem
          mkdir -p /var/www/costelata/api
          mkdir -p /var/www/costelata/ui

    - name: Enviar backend e frontend via rsync
      uses: burnett01/rsync-deployments@v5
      with:
        switches: -avz --delete
        path: |
          api/
          ui/
        remote_path: /var/www/costelata/
        remote_host: ${{ secrets.VPS_HOST }}
        remote_user: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_KEY }}

    - name: Deploy e rollback na VPS
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_KEY }}
        script: |
          set -e
          cd /var/www/costelata

          echo "📦 Salvando imagens atuais..."
          docker save costelata-backend > backend_prev.tar || true
          docker save costelata-frontend > frontend_prev.tar || true

          echo "🔨 Buildando novos containers..."
          if ! docker compose up -d --build; then
            echo "❌ Build falhou! Restaurando versões anteriores..."
            [ -s backend_prev.tar ] && docker load < backend_prev.tar
            [ -s frontend_prev.tar ] && docker load < frontend_prev.tar
            docker compose up -d
            exit 1
          fi

          echo "⏳ Aguardando healthchecks..."
          sleep 20

          BACKEND_HEALTH=$(docker inspect --format='{{.State.Health.Status}}' costelata-backend 2>/dev/null || echo "unhealthy")
          FRONTEND_HEALTH=$(docker inspect --format='{{.State.Health.Status}}' costelata-frontend 2>/dev/null || echo "unhealthy")

          if [ "$BACKEND_HEALTH" != "healthy" ] || [ "$FRONTEND_HEALTH" != "healthy" ]; then
            echo "❌ Healthcheck falhou! Restaurando containers anteriores..."
            [ -s backend_prev.tar ] && docker load < backend_prev.tar
            [ -s frontend_prev.tar ] && docker load < frontend_prev.tar
            docker compose up -d
            exit 1
          fi

          echo "✅ Deploy concluído com sucesso!"
          docker image prune -f
